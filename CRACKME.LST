Turbo Assembler	 Version 4.1	    03/03/25 19:42:35	    Page 1
crackme.asm



      1				     ;------------------------------------------------------------------------------
      2				     ;			      Asm Task to Crack	somebody
      3				     ;			       (c) 2025	Muratov	Artyom
      4				     ;------------------------------------------------------------------------------
      5
      6	0000			     .model  tiny
      7	0000			     .code
      8				     org     100h
      9
     10	0100			     Start:
     11	0100  E8 0005				     call PasswordVerify	     ; Start verify
     12
     13	0103  B8 4C00				     mov  ax, 4c00h		     ; DOS Fn 4ch = exit (al)
     14	0106  CD 21				     int  21h
     15
     16				     ;------------------------------------------------------------------------------
     17				     ; PasswordVerify func to request a	password and verify it
     18				     ; Entry:	     None
     19				     ; Exit:	     None
     20				     ; Destroy:	     ax, bx, dx
     21				     ;------------------------------------------------------------------------------
     22	0108			     PasswordVerify  proc
     23	0108  BB FF00				     mov  bx, 0FF00h		     ; bx = 0
     24	010B			     Retry:
     25	010B  BA 01B2r				     lea  dx, AskPassword	     ; dx = request a password
     26	010E  E8 006C				     call PutString		     ; output string to	consol
     27
     28				     ;---------------Input-Password-------------------------------------------------
     29	0111  53				     push bx			     ; save bx in stack
     30	0112  E8 0039				     call ReadPassword		     ; read password from
     31										     ; stdin to	verify it
     32	0115  5B				     pop  bx			     ; back bx from stack
     33
     34				     ;---------------Check-Is-Quit-Or-Not-------------------------------------------
     35	0116  80 3E 01CEr 01			     cmp  IsQuit, 1		     ; if (IsQuit = 1) {
     36	011B  74 1D				     je	  UnLuckVerify		     ; goto UnLuckVerify }
     37
     38				     ;---------------End-Check------------------------------------------------------
     39
     40	011D  E8 001B				     call CursorNewString	     ; make cursor to new string
     41
     42	0120  8B C3				     mov  ax, bx		     ; ax = bx
     43				     ;---------------Count-Hash-and-Verify-Password---------------------------------
     44	0122  50				     push ax			     ; save ax in stack
     45
     46	0123  BE 01CFr				     lea  si, InputPassword	     ; si  = InputPassword
     47
     48	0126  E8 0059				     call HashCounter		     ; Count hash InputPassword
     49										     ; di = hash of InputPassword
     50	0129  58				     pop  ax			     ; back ax from stack
     51
     52	012A  E8 0019				     call Verify		     ; compare strings InputPassword
     53										     ; and AdminPassword with len cx
     54										     ; bx += 1,	if password is
     55										     ; incorrect
     56	012D  3B D8				     cmp  bx, ax		     ; if (bx >	ax) {
     57	012F  77 DA				     ja	  Retry			     ; goto Retry }
Turbo Assembler	 Version 4.1	    03/03/25 19:42:35	    Page 2
crackme.asm



     58
     59	0131  BA 0198r				     lea  dx, HelloAdmin	     ; if password is right
     60	0134  E8 0046				     call PutString		     ; "Hi, you	got Admin rights!$"
     61	0137  E8 0001				     call CursorNewString	     ; make cursor to new string
     62	013A			     UnLuckVerify:
     63
     64	013A  C3				     ret
     65	013B			     PasswordVerify  endp
     66
     67				     ;------------------------------------------------------------------------------
     68				     ; CursorNewString func to make cursor to new string
     69				     ; Entry:	     None
     70				     ; Exit:	     None
     71				     ; Destroy:	     ah, dl
     72				     ;------------------------------------------------------------------------------
     73	013B			     CursorNewString proc
     74	013B  B4 02				     mov  ah, 02h		     ; Dos Fn 02h = Display Output
     75	013D  B2 0D				     mov  dl, 13		     ; CR (cursor to the beginning
     76										     ; of the line)
     77	013F  CD 21				     int  21h
     78	0141  B2 0A				     mov  dl, 10		     ; LF (cursor to next line)
     79	0143  CD 21				     int  21h
     80
     81	0145  C3				     ret
     82	0146			     CursorNewString endp
     83
     84				     ;------------------------------------------------------------------------------
     85				     ; Verify	     func to compare strings InputPassword and AdminPassword
     86				     ; Entry:	     di	 = hash	of InputPassword
     87				     ;		     bx	 = old value of	bx
     88				     ; Exit:	     bx	 = old value of	bx, if password	is correct
     89				     ;		     bx	+= 1, if password is incorrect
     90				     ; Destroy:	     bx	(may be)
     91				     ;------------------------------------------------------------------------------
     92	0146			     Verify	     proc
     93	0146  3B 3E 01DEr			     cmp  di, AdminPassword	     ; if (di =	AdminPassword (hash)) {
     94	014A  74 01				     je	  Equal			     ; goto NoEqual }
     95	014C  43				     inc  bx			     ; bx += 1 anyway
     96	014D			     Equal:
     97	014D  C3				     ret
     98	014E			     Verify	     endp
     99
    100				     ;------------------------------------------------------------------------------
    101				     ; ReadPassword  func to read password from	stdin to buffer
    102				     ; Entry:	     None
    103				     ; Exit:	     InputPassword - buffer from stdin
    104				     ; Destroy:	     cx, ax, di, dx, bx
    105				     ;------------------------------------------------------------------------------
    106	014E			     ReadPassword    proc
    107	014E  B9 000F				     mov  cx, 15		     ; cx = number of symbols
    108										     ; in password
    109	0151  BF 01CFr				     mov  di, offset InputPassword   ; offset
    110	0154			     NewChar:
    111	0154  B4 07				     mov  ah, 07h		     ; DOS Fn 07H: No echo
    112										     ; unfiltered console input
    113	0156  CD 21				     int  21h			     ; call Fn 07H
    114										     ; al = input symbol
Turbo Assembler	 Version 4.1	    03/03/25 19:42:35	    Page 3
crackme.asm



    115				     ;---------------Check-[q]-quit-------------------------------------------------
    116	0158  3C 71				     cmp  al, 'q'		     ; if (al != 'q') {
    117	015A  75 09				     jne  ContinueInput		     ; goto ContinueInput }
    118	015C  C6 06 01CEr 01 90			     mov  IsQuit, 1		     ; IsQuit =	1
    119	0162  EB 18 90				     jmp  EndInput		     ; goto EndInput
    120				     ;---------------Check-[q]-quit-------------------------------------------------
    121	0165			     ContinueInput:
    122				     ;---------------Check-Enter----------------------------------------------------
    123	0165  50				     push ax			     ; save ax in stack
    124	0166  E4 60				     in	  al, 60H		     ; read scan code from PPI port
    125										     ; al = symbol from	60H port
    126	0168  8A D8				     mov  bl, al		     ; bl = al
    127	016A  58				     pop  ax			     ; back ax from stack
    128	016B  80 FB 1C				     cmp  bl, 1ch		     ; if (al =	'Enter') {
    129	016E  74 0C				     je	  EndInput		     ; goto EndInput }
    130				     ;---------------End-Check-Enter------------------------------------------------
    131	0170  2E: 88 05				     mov  cs:[di], al		     ; al to buffer InputPassword
    132	0173  47				     inc  di			     ; di++
    133										     ;----------------------------
    134	0174  B4 02				     mov  ah, 02h		     ; DOS Fn 02h Display output |
    135										     ; write '*' when user	 |
    136	0176  B2 2A				     mov  dl, '*'		     ; write symbol		 |
    137	0178  CD 21				     int  21h			     ;----------------------------
    138
    139	017A  E2 D8				     loop NewChar		     ; while (--cx) goto NewChar
    140	017C			     EndInput:
    141	017C  C3				     ret
    142	017D			     ReadPassword    endp
    143
    144				     ;------------------------------------------------------------------------------
    145				     ; PutString  Func to make string of frame
    146				     ; Entry:	     dx	    - offset  array of symbol for string
    147				     ; Exit:	     None
    148				     ; Destroy:	     ah
    149				     ;------------------------------------------------------------------------------
    150	017D			     PutString	     proc
    151	017D  B4 09				     mov  ah, 09h		     ; DOS Fn 09h = puts(dx)
    152
    153	017F  CD 21				     int  21h			     ; call puts(dx)
    154
    155	0181  C3				     ret
    156	0182			     PutString	     endp
    157
    158				     ;------------------------------------------------------------------------------
    159				     ; HashCounter   func to count hash	of password
    160				     ; Entry:	     si	= ptr to string	of password
    161				     ; Exit:	     di	= hash of password
    162				     ; Destroy:	     si, ax, di, cx
    163				     ;------------------------------------------------------------------------------
    164	0182			     HashCounter     proc
    165	0182  33 FF				     xor  di, di		     ; di  = 0
    166	0184  33 C0				     xor  ax, ax		     ; ax  = 0
    167	0186  B9 000F				     mov  cx, 15		     ; cx  = len buffer
    168	0189			     HashCount:
    169	0189  AC				     lodsb			     ; mov al, ds:[si] && inc si
    170	018A  D1 E8 D1 E8 D1 E8	D1+		     shr  ax, 4			     ; ax > 4 (____0101)
    171	      E8
Turbo Assembler	 Version 4.1	    03/03/25 19:42:35	    Page 4
crackme.asm



    172	0192  03 F8				     add  di, ax		     ; di += ax
    173	0194  E2 F3				     loop HashCount		     ; while (--cx) goto HashCount
    174
    175	0196  C3				     ret
    176	0197			     HashCounter     endp
    177
    178				     ;------------------------------------------------------------------------------
    179	0197  0C		     AdminPasswordLen db 12
    180
    181	0198  48 69 2C 20 79 6F	75+  HelloAdmin	     db	 "Hi, you got Admin rights!$"
    182	      20 67 6F 74 20 41	64+
    183	      6D 69 6E 20 72 69	67+
    184	      68 74 73 21 24
    185
    186	01B2  45 6E 74 65 72 20	74+  AskPassword     db	 "Enter	the password or	[q]: $"
    187	      68 65 20 70 61 73	73+
    188	      77 6F 72 64 20 6F	72+
    189	      20 5B 71 5D 3A 20	24
    190
    191	01CE  00		     Isquit	     db	 0
    192
    193	01CF  0F*(53)		     InputPassword   db	 15 dup	('S')
    194
    195	01DE  0045		     AdminPassword   dw	 0045h
    196
    197	01E0  4B 4F 47 4F 52 54	41+  AdminPasswordSSS	db  "KOGORTASPIRTSSS"
    198	      53 50 49 52 54 53	53+
    199	      53
    200
    201				     End	     Start
Turbo Assembler	 Version 4.1	    03/03/25 19:42:35	    Page 5
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/03/25"
??FILENAME			  Text	 "crackme "
??TIME				  Text	 "19:42:35"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 CRACKME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ADMINPASSWORD			  Word	 DGROUP:01DE
ADMINPASSWORDLEN		  Byte	 DGROUP:0197
ADMINPASSWORDSSS		  Byte	 DGROUP:01E0
ASKPASSWORD			  Byte	 DGROUP:01B2
CONTINUEINPUT			  Near	 DGROUP:0165
CURSORNEWSTRING			  Near	 DGROUP:013B
ENDINPUT			  Near	 DGROUP:017C
EQUAL				  Near	 DGROUP:014D
HASHCOUNT			  Near	 DGROUP:0189
HASHCOUNTER			  Near	 DGROUP:0182
HELLOADMIN			  Byte	 DGROUP:0198
INPUTPASSWORD			  Byte	 DGROUP:01CF
ISQUIT				  Byte	 DGROUP:01CE
NEWCHAR				  Near	 DGROUP:0154
PASSWORDVERIFY			  Near	 DGROUP:0108
PUTSTRING			  Near	 DGROUP:017D
READPASSWORD			  Near	 DGROUP:014E
RETRY				  Near	 DGROUP:010B
START				  Near	 DGROUP:0100
UNLUCKVERIFY			  Near	 DGROUP:013A
VERIFY				  Near	 DGROUP:0146

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  01EF Word	  Public  CODE
