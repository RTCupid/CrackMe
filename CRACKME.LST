Turbo Assembler	 Version 4.1	    03/02/25 15:42:52	    Page 1
crackme.asm



      1				     ;------------------------------------------------------------------------------
      2				     ;			      Asm Task to Crack	somebody
      3				     ;			       (c) 2025	Muratov	Artyom
      4				     ;------------------------------------------------------------------------------
      5
      6	0000			     .model  tiny
      7	0000			     .code
      8				     org     100h
      9
     10	0100			     Start:
     11	0100  E8 0005				     call PasswordVerify	     ; Start verify
     12
     13	0103  B8 4C00				     mov  ax, 4c00h		     ; DOS Fn 4ch = exit (al)
     14	0106  CD 21				     int  21h
     15
     16				     ;------------------------------------------------------------------------------
     17				     ; PasswordVerify func to request a	password and verify it
     18				     ; Entry:	     None
     19				     ; Exit:	     None
     20				     ; Destroy:	     ax, bx, dx
     21				     ;------------------------------------------------------------------------------
     22	0108			     PasswordVerify  proc
     23	0108  BB 0000				     mov  bx, 0			     ; bx = 0
     24	010B  B9 000A				     mov  cx, 10		     ; cx = attempts counter
     25	010E			     Retry:
     26	010E  49				     dec  cx			     ; cx--
     27	010F  74 1D				     je	  EndAttempts
     28	0111  51				     push cx			     ; save cx in stack
     29
     30	0112  BA 01BEr				     lea  dx, AskPassword	     ; dx = request a password
     31	0115  E8 0067				     call PutString		     ; output string to	consol
     32
     33	0118  E8 003E				     call ReadPassword		     ; read password from
     34										     ; stdin to	verify it
     35	011B  E8 0023				     call CursorNewString	     ; make cursor to new string
     36
     37	011E  8B C3				     mov  ax, bx		     ; ax = bx
     38	0120  B9 000C				     mov  cx, 12		     ; cx = 12 (len of password)
     39	0123  E8 0026				     call Verify		     ; compare strings InputPassword
     40										     ; and AdminPassword with len cx
     41										     ; bx += 1,	if password is
     42										     ; incorrect
     43	0126  59				     pop  cx			     ; back cx from stack
     44	0127  3B D8				     cmp  bx, ax		     ; if (bx >	ax) {
     45	0129  77 E3				     ja	  Retry			     ; goto Retry }
     46	012B  EB 0A 90				     jmp  CorrectPassword	     ; else goto CorrectPassword
     47	012E			     EndAttempts:
     48	012E  BA 01A0r				     lea  dx, EndOfAttempts	     ; you have	run out	of attempts
     49	0131  E8 004B				     call PutString
     50	0134  E8 000A				     call CursorNewString	     ; make cursor to new string
     51	0137			     Correctpassword:
     52	0137  BA 0186r				     lea  dx, HelloAdmin	     ; if password is right
     53	013A  E8 0042				     call PutString		     ; "Hi, you	got Admin rights!$"
     54	013D  E8 0001				     call CursorNewString	     ; make cursor to new string
     55
     56	0140  C3				     ret
     57	0141			     PasswordVerify  endp
Turbo Assembler	 Version 4.1	    03/02/25 15:42:52	    Page 2
crackme.asm



     58
     59				     ;------------------------------------------------------------------------------
     60				     ; CursorNewString func to make cursor to new string
     61				     ; Entry:	     None
     62				     ; Exit:	     None
     63				     ; Destroy:	     ah, dl
     64				     ;------------------------------------------------------------------------------
     65	0141			     CursorNewString proc
     66	0141  B4 02				     mov  ah, 02h		     ; Dos Fn 02h = Display Output
     67	0143  B2 0D				     mov  dl, 13		     ; CR (cursor to the beginning
     68										     ; of the line)
     69	0145  CD 21				     int  21h
     70	0147  B2 0A				     mov  dl, 10		     ; LF (cursor to next line)
     71	0149  CD 21				     int  21h
     72
     73	014B  C3				     ret
     74	014C			     CursorNewString endp
     75
     76				     ;------------------------------------------------------------------------------
     77				     ; Verify	     func to compare strings InputPassword and AdminPassword
     78				     ; Entry:	     cx	 = len of password
     79				     ;		     bx	 = old value of	bx
     80				     ; Exit:	     bx	 = old value of	bx, if password	is correct
     81				     ;		     bx	+= 1, if password is incorrect
     82				     ; Destroy:	     bx	(may be), si, di, DF, cx
     83				     ;------------------------------------------------------------------------------
     84	014C			     Verify	     proc
     85	014C  FC				     cld			     ; DF = 0 (forward)
     86	014D  BE 01D3r				     lea  si, InputPassword	     ; preparation
     87	0150  BF 01E2r				     lea  di, AdminPassword	     ; for cmpsb
     88
     89	0153  F3> A6				     repe cmpsb			     ;	cmp while equal
     90										     ; (max cx symbols)
     91										     ; if (strings is different) {
     92	0155  74 01				     je	  Equal			     ; goto NoEqual }
     93	0157  43				     inc  bx			     ; bx += 1 anyway
     94	0158			     Equal:
     95	0158  C3				     ret
     96	0159			     Verify	     endp
     97
     98				     ;------------------------------------------------------------------------------
     99				     ; ReadPassword  func to read password from	stdin to buffer
    100				     ; Entry:	     None
    101				     ; Exit:	     InputPassword - buffer from stdin
    102				     ;		     dx	= len of input password
    103				     ; Destroy:	     cx, ax, di
    104				     ;------------------------------------------------------------------------------
    105	0159			     ReadPassword    proc
    106	0159  B9 000F				     mov  cx, 15		     ; cx = number of symbols
    107										     ; in password
    108	015C  BF 01D3r				     mov  di, offset InputPassword   ; offset
    109
    110	015F  BA 0000				     mov  dx, 0			     ; counter len of input password
    111	0162			     NewChar:
    112	0162  B4 07				     mov  ah, 07h		     ; DOS Fn 07H: No echo
    113										     ; unfiltered console input
    114	0164  CD 21				     int  21h			     ; call Fn 07H
Turbo Assembler	 Version 4.1	    03/02/25 15:42:52	    Page 3
crackme.asm



    115										     ; al = input symbol
    116	0166  50				     push ax			     ; save ax in stack
    117	0167  E4 60				     in	  al, 60H		     ; read scan code from PPI port
    118										     ; al = symbol from	60H port
    119	0169  8A D8				     mov  bl, al		     ; bl = al
    120	016B  58				     pop  ax			     ; back ax from stack
    121	016C  80 FB 1C				     cmp  bl, 1ch		     ; if (al =	'Enter') {
    122	016F  74 0D				     je	  EndInput		     ; goto EndInput }
    123
    124	0171  2E: 88 05				     mov  cs:[di], al		     ; write to	buffer InputPassword
    125	0174  47				     inc  di			     ; di++
    126
    127										     ;----------------------------
    128	0175  B4 02				     mov  ah, 02h		     ; DOS Fn 02h Display output |
    129										     ; write '*' when user	 |
    130	0177  B2 2A				     mov  dl, '*'		     ; write one symbol		 |
    131	0179  CD 21				     int  21h			     ;----------------------------
    132	017B  42				     inc  dx			     ; dx++
    133
    134	017C  E2 E4				     loop NewChar		     ; while (--cx) goto NewChar
    135						     ;mov  byte	ptr cs:[di], '$'     ; write to	InputPassword
    136										     ; end symbol '$'
    137	017E			     EndInput:
    138	017E  C3				     ret
    139	017F			     ReadPassword    endp
    140
    141				     ;------------------------------------------------------------------------------
    142				     ; PutString  Func to make string of frame
    143				     ; Entry:	     dx	    - offset  array of symbol for string
    144				     ; Exit:	     None
    145				     ; Destroy:	     ah
    146				     ;------------------------------------------------------------------------------
    147	017F			     PutString	     proc
    148	017F  B4 09				     mov  ah, 09h		     ; DOS Fn 09h = puts(dx)
    149
    150	0181  CD 21				     int  21h			     ; call puts(dx)
    151
    152	0183  C3				     ret
    153	0184			     PutString	     endp
    154
    155				     ;------------------------------------------------------------------------------
    156				     ; HashCounter   func to count hash	of password
    157				     ; Entry:	     si	= ptr to string	of password
    158				     ; Exit:	     ax	= hash of password
    159				     ; Destroy:	     si, ax,
    160				     ;------------------------------------------------------------------------------
    161	0184			     HashCounter     proc
    162
    163
    164
    165
    166	0184  C3				     ret
    167	0185			     HashCounter     endp
    168
    169				     ;------------------------------------------------------------------------------
    170	0185  0C		     AdminPasswordLen db 12
    171
Turbo Assembler	 Version 4.1	    03/02/25 15:42:52	    Page 4
crackme.asm



    172	0186  48 69 2C 20 79 6F	75+  HelloAdmin	     db	 "Hi, you got Admin rights!$"
    173	      20 67 6F 74 20 41	64+
    174	      6D 69 6E 20 72 69	67+
    175	      68 74 73 21 24
    176
    177	01A0  59 6F 75 20 68 61	76+  EndOfAttempts   db	 "You have run out of attempts!$"
    178	      65 20 72 75 6E 20	6F+
    179	      75 74 20 6F 66 20	61+
    180	      74 74 65 6D 70 74	73+
    181	      21 24
    182
    183	01BE  45 6E 74 65 72 20	74+  AskPassword     db	 "Enter	the password: $"
    184	      68 65 20 70 61 73	73+
    185	      77 6F 72 64 3A 20	24
    186
    187	01D3  0F*(73)		     InputPassword   db	 15 dup	('s')
    188
    189	01E2  4B 4F 47 4F 52 54	41+  AdminPassword   db	 "KOGORTASPIRT"
    190	      53 50 49 52 54
    191
    192				     End	     Start
Turbo Assembler	 Version 4.1	    03/02/25 15:42:52	    Page 5
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/02/25"
??FILENAME			  Text	 "crackme "
??TIME				  Text	 "15:42:52"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 CRACKME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ADMINPASSWORD			  Byte	 DGROUP:01E2
ADMINPASSWORDLEN		  Byte	 DGROUP:0185
ASKPASSWORD			  Byte	 DGROUP:01BE
CORRECTPASSWORD			  Near	 DGROUP:0137
CURSORNEWSTRING			  Near	 DGROUP:0141
ENDATTEMPTS			  Near	 DGROUP:012E
ENDINPUT			  Near	 DGROUP:017E
ENDOFATTEMPTS			  Byte	 DGROUP:01A0
EQUAL				  Near	 DGROUP:0158
HASHCOUNTER			  Near	 DGROUP:0184
HELLOADMIN			  Byte	 DGROUP:0186
INPUTPASSWORD			  Byte	 DGROUP:01D3
NEWCHAR				  Near	 DGROUP:0162
PASSWORDVERIFY			  Near	 DGROUP:0108
PUTSTRING			  Near	 DGROUP:017F
READPASSWORD			  Near	 DGROUP:0159
RETRY				  Near	 DGROUP:010E
START				  Near	 DGROUP:0100
VERIFY				  Near	 DGROUP:014C

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  01EE Word	  Public  CODE
