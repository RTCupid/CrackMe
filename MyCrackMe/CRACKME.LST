Turbo Assembler	 Version 4.1	    03/03/25 22:23:58	    Page 1
crackme.asm



      1				     ;------------------------------------------------------------------------------
      2				     ;			      Asm Task to Crack	somebody
      3				     ;			       (c) 2025	Muratov	Artyom
      4				     ;------------------------------------------------------------------------------
      5
      6	0000			     .model  tiny
      7	0000			     .code
      8				     org     100h
      9
     10	0100			     Start:
     11	0100  E8 0005				     call PasswordVerify	     ; Start verify
     12
     13	0103  B8 4C00				     mov  ax, 4c00h		     ; DOS Fn 4ch = exit (al)
     14	0106  CD 21				     int  21h
     15
     16				     ;------------------------------------------------------------------------------
     17				     ; PasswordVerify func to request a	password and verify it
     18				     ; Entry:	     None
     19				     ; Exit:	     None
     20				     ; Destroy:	     ax, bx, dx
     21				     ;------------------------------------------------------------------------------
     22	0108			     PasswordVerify  proc
     23	0108  BB FF00				     mov  bx, 0FF00h		     ; bx = 0
     24	010B			     Retry:
     25	010B  BA 01C7r				     lea  dx, AskPassword	     ; dx = request a password
     26	010E  E8 007D				     call PutString		     ; output string to	consol
     27
     28				     ;---------------Input-Password-------------------------------------------------
     29
     30	0111  53				     push bx			     ; save bx in stack
     31	0112  E8 004B				     call ReadPassword		     ; read password from
     32										     ; stdin to	verify it
     33	0115  5B				     pop  bx			     ; back bx from stack
     34
     35				     ;---------------Check-Is-Quit-Or-Not-------------------------------------------
     36
     37	0116  80 3E 01E3r 01			     cmp  IsQuit, 1		     ; if (IsQuit = 1) {
     38	011B  74 2F				     je	  UnLuckVerify		     ; goto UnLuckVerify }
     39
     40				     ;---------------End-Check-Cursor-to-new-string---------------------------------
     41
     42	011D  E8 002D				     call CursorNewString	     ; make cursor to new string
     43
     44	0120  8B D3				     mov  dx, bx		     ; dx = bx
     45
     46				     ;---------------Count-Hash-and-Verify-Password---------------------------------
     47
     48	0122  BE 012Br				     lea  si, InputPassword	     ; si  = InputPassword
     49
     50	0125  E8 006B				     call HashCounter		     ; Count hash InputPassword
     51										     ; di = hash of InputPassword
     52	0128  EB 10 90				     jmp  VerifyPassword	     ; goto VerifyPassword
     53
     54	012B  0F*(53)				     InputPassword   db	 15 dup	('S'); buffer with input password
     55	013A			     VerifyPassword:
     56	013A  8B D3				     mov  dx, bx		     ; dx = bx (for hacking)
     57						     ;pop  ax			      ;	back ax	from stack
Turbo Assembler	 Version 4.1	    03/03/25 22:23:58	    Page 2
crackme.asm



     58	013C  E8 0019				     call Verify		     ; compare strings InputPassword
     59										     ; and AdminPassword with len cx
     60										     ; bx += 1,	if password is
     61										     ; incorrect
     62	013F  3B DA				     cmp  bx, dx		     ; if (bx >	dx) {
     63	0141  77 C8				     ja	  Retry			     ; goto Retry }
     64
     65				     ;---------------Giving-Admin-Rights--------------------------------------------
     66
     67	0143  BA 01ABr				     lea  dx, HelloAdmin	     ; if password is right
     68	0146  E8 0045				     call PutString		     ; "Hi, you	got Admin rights!$"
     69	0149  E8 0001				     call CursorNewString	     ; make cursor to new string
     70	014C			     UnLuckVerify:
     71
     72	014C  C3				     ret
     73	014D			     PasswordVerify  endp
     74
     75				     ;------------------------------------------------------------------------------
     76				     ; CursorNewString func to make cursor to new string
     77				     ; Entry:	     None
     78				     ; Exit:	     None
     79				     ; Destroy:	     ah, dl
     80				     ;------------------------------------------------------------------------------
     81	014D			     CursorNewString proc
     82	014D  B4 02				     mov  ah, 02h		     ; Dos Fn 02h = Display Output
     83	014F  B2 0D				     mov  dl, 13		     ; CR (cursor to the beginning
     84										     ; of the line)
     85	0151  CD 21				     int  21h
     86	0153  B2 0A				     mov  dl, 10		     ; LF (cursor to next line)
     87	0155  CD 21				     int  21h
     88
     89	0157  C3				     ret
     90	0158			     CursorNewString endp
     91
     92				     ;------------------------------------------------------------------------------
     93				     ; Verify	     func to compare strings InputPassword and AdminPassword
     94				     ; Entry:	     di	 = hash	of InputPassword
     95				     ;		     bx	 = old value of	bx
     96				     ; Exit:	     bx	 = old value of	bx, if password	is correct
     97				     ;		     bx	+= 1, if password is incorrect
     98				     ; Destroy:	     bx	(may be)
     99				     ;------------------------------------------------------------------------------
    100	0158			     Verify	     proc
    101	0158  3B 3E 01C5r			     cmp  di, AdminPassword	     ; if (di =	AdminPassword (hash)) {
    102	015C  74 01				     je	  Equal			     ; goto NoEqual }
    103	015E  43				     inc  bx			     ; bx += 1 anyway
    104	015F			     Equal:
    105	015F  C3				     ret
    106	0160			     Verify	     endp
    107
    108				     ;------------------------------------------------------------------------------
    109				     ; ReadPassword  func to read password from	stdin to buffer
    110				     ; Entry:	     None
    111				     ; Exit:	     InputPassword - buffer from stdin
    112				     ; Destroy:	     cx, ax, di, dx, bx
    113				     ;------------------------------------------------------------------------------
    114	0160			     ReadPassword    proc
Turbo Assembler	 Version 4.1	    03/03/25 22:23:58	    Page 3
crackme.asm



    115						     ;mov  word	ptr cx,	BufferLen     ;	cx = number of symbols
    116										     ; in password
    117	0160  BF 012Br				     mov  di, offset InputPassword   ; offset
    118	0163			     NewChar:
    119	0163  B4 07				     mov  ah, 07h		     ; DOS Fn 07H: No echo
    120										     ; unfiltered console input
    121	0165  CD 21				     int  21h			     ; call Fn 07H
    122										     ; al = input symbol
    123				     ;---------------Check-[q]-quit-------------------------------------------------
    124	0167  3C 71				     cmp  al, 'q'		     ; if (al  = 'q') {
    125	0169  74 02				     je	  Quit			     ; goto Quit }
    126						     ;cmp  al, 'EOF'		      ;	if (al != 'EOF') {
    127	016B  75 09				     jne  ContinueInput		     ; goto ContinueInput }
    128	016D			     Quit:
    129	016D  C6 06 01E3r 01 90			     mov  IsQuit, 1		     ; IsQuit =	1
    130	0173  EB 18 90				     jmp  EndInput		     ; goto EndInput
    131				     ;---------------Check-[q]-quit-------------------------------------------------
    132	0176			     ContinueInput:
    133				     ;---------------Check-Enter----------------------------------------------------
    134	0176  50				     push ax			     ; save ax in stack
    135	0177  E4 60				     in	  al, 60H		     ; read scan code from PPI port
    136										     ; al = symbol from	60H port
    137	0179  8A D8				     mov  bl, al		     ; bl = al
    138	017B  58				     pop  ax			     ; back ax from stack
    139	017C  80 FB 1C				     cmp  bl, 1ch		     ; if (al =	'Enter') {
    140	017F  74 0C				     je	  EndInput		     ; goto EndInput }
    141				     ;---------------Load-Input-Symbol-to-Buffer------------------------------------
    142	0181  2E: 88 05				     mov  cs:[di], al		     ; al to buffer InputPassword
    143	0184  47				     inc  di			     ; di++
    144				     ;---------------Write-*--------------------------------------------------------
    145										     ;----------------------------
    146	0185  B4 02				     mov  ah, 02h		     ; DOS Fn 02h Display output |
    147										     ; write '*' when user	 |
    148	0187  B2 2A				     mov  dl, '*'		     ; write symbol		 |
    149	0189  CD 21				     int  21h			     ;----------------------------
    150
    151	018B  EB D6				     jmp  NewChar		     ; goto NewChar
    152	018D			     EndInput:
    153	018D  C3				     ret
    154	018E			     ReadPassword    endp
    155
    156				     ;------------------------------------------------------------------------------
    157				     ; PutString  Func to make string of frame
    158				     ; Entry:	     dx	    - offset  array of symbol for string
    159				     ; Exit:	     None
    160				     ; Destroy:	     ah
    161				     ;------------------------------------------------------------------------------
    162	018E			     PutString	     proc
    163	018E  B4 09				     mov  ah, 09h		     ; DOS Fn 09h = puts(dx)
    164
    165	0190  CD 21				     int  21h			     ; call puts(dx)
    166
    167	0192  C3				     ret
    168	0193			     PutString	     endp
    169
    170				     ;------------------------------------------------------------------------------
    171				     ; HashCounter   func to count hash	of password
Turbo Assembler	 Version 4.1	    03/03/25 22:23:58	    Page 4
crackme.asm



    172				     ; Entry:	     si	= ptr to string	of password
    173				     ; Exit:	     di	= hash of password
    174				     ; Destroy:	     si, ax, di, cx
    175				     ;------------------------------------------------------------------------------
    176	0193			     HashCounter     proc
    177	0193  33 FF				     xor  di, di		     ; di  = 0
    178	0195  33 C0				     xor  ax, ax		     ; ax  = 0
    179	0197  8B 0E 01A9r			     mov  word ptr cx, BufferLen     ; cx  = len buffer
    180	019B			     HashCount:
    181	019B  AC				     lodsb			     ; mov al, ds:[si] && inc si
    182	019C  D1 E8 D1 E8 D1 E8	D1+		     shr  ax, 4			     ; ax >> 4 (____0101)
    183	      E8
    184	01A4  03 F8				     add  di, ax		     ; di += ax
    185	01A6  E2 F3				     loop HashCount		     ; while (--cx) goto HashCount
    186
    187	01A8  C3				     ret
    188	01A9			     HashCounter     endp
    189
    190				     ;------------------------------------------------------------------------------
    191
    192	01A9  000F		     BufferLen	     dw	 15
    193
    194	01AB  48 69 2C 20 79 6F	75+  HelloAdmin	     db	 "Hi, you got Admin rights!$"
    195	      20 67 6F 74 20 41	64+
    196	      6D 69 6E 20 72 69	67+
    197	      68 74 73 21 24
    198
    199	01C5  0045		     AdminPassword   dw	 0045h
    200
    201	01C7  45 6E 74 65 72 20	74+  AskPassword     db	 "Enter	the password or	[q]: $"
    202	      68 65 20 70 61 73	73+
    203	      77 6F 72 64 20 6F	72+
    204	      20 5B 71 5D 3A 20	24
    205
    206	01E3  00		     Isquit	     db	 0
    207
    208				     End	     Start
Turbo Assembler	 Version 4.1	    03/03/25 22:23:58	    Page 5
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/03/25"
??FILENAME			  Text	 "crackme "
??TIME				  Text	 "22:23:58"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 CRACKME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ADMINPASSWORD			  Word	 DGROUP:01C5
ASKPASSWORD			  Byte	 DGROUP:01C7
BUFFERLEN			  Word	 DGROUP:01A9
CONTINUEINPUT			  Near	 DGROUP:0176
CURSORNEWSTRING			  Near	 DGROUP:014D
ENDINPUT			  Near	 DGROUP:018D
EQUAL				  Near	 DGROUP:015F
HASHCOUNT			  Near	 DGROUP:019B
HASHCOUNTER			  Near	 DGROUP:0193
HELLOADMIN			  Byte	 DGROUP:01AB
INPUTPASSWORD			  Byte	 DGROUP:012B
ISQUIT				  Byte	 DGROUP:01E3
NEWCHAR				  Near	 DGROUP:0163
PASSWORDVERIFY			  Near	 DGROUP:0108
PUTSTRING			  Near	 DGROUP:018E
QUIT				  Near	 DGROUP:016D
READPASSWORD			  Near	 DGROUP:0160
RETRY				  Near	 DGROUP:010B
START				  Near	 DGROUP:0100
UNLUCKVERIFY			  Near	 DGROUP:014C
VERIFY				  Near	 DGROUP:0158
VERIFYPASSWORD			  Near	 DGROUP:013A

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  01E4 Word	  Public  CODE
